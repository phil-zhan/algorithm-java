package org.study.coding.class34;

/**
 * // 有关这个游戏更有意思、更完整的内容：
 * // https://www.bilibili.com/video/BV1rJ411n7ri
 * // 也推荐这个up主
 *
 * 289. 生命游戏
 * 根据 百度百科 ， 生命游戏 ，简称为 生命 ，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。
 *
 * 给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态： 1 即为 活细胞 （live），或 0 即为 死细胞 （dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
 *
 * 如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
 * 如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
 * 如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
 * 如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
 * 下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。给你 m x n 网格面板 board 的当前状态，返回下一个状态。
 *
 *
 * 解法：
 * 不用辅助空间。但是实现辅助空间的效果
 * 将每个位置的数字都看成是int的32位。
 * 实际上，二维数组中的0或1，只是使用了最后一位
 *
 * 遍历二维数组。
 * 如果某个位置下一轮还是0，就不动
 * 如果某个位置下一轮还是1，就将该数的倒数第二位改成下一轮的状态
 *
 * 也就是借用一下该数的倒数第二位。也可以数其他位
 *
 * @since 2022-04-21 21:43:40
 */
public class Problem_0289_GameOfLife {

    public static void gameOfLife(int[][] board) {
        int N = board.length;
        int M = board[0].length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                // i、j位置的周围有几个1
                int neighbors = neighbors(board, i, j);

                // 附近有三个1，下一轮必活
                // 当前是活着的，周围右有两个1.下一轮也会活着。其他状态，下一轮都是死的
                // 将是活状态的倒数第二个bit位改成1也就是 或 一个2上去
                if (neighbors == 3 || (board[i][j] == 1 && neighbors == 2)) {
                    board[i][j] |= 2;
                }
            }
        }

        // 每一个数都右移1位。也就是把倒数第二位的状态捣腾到最后一bit位上去
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                board[i][j] >>= 1;
            }
        }
    }

    /**
     * b[i][j] 这个位置的数，周围有几个1
     *
     * @since 2022-04-21 21:57:16
     */
    public static int neighbors(int[][] b, int i, int j) {
        return f(b, i - 1, j - 1)
                + f(b, i - 1, j)
                + f(b, i - 1, j + 1)
                + f(b, i, j - 1)
                + f(b, i, j + 1)
                + f(b, i + 1, j - 1)
                + f(b, i + 1, j)
                + f(b, i + 1, j + 1);
    }

    /**
     * b[i][j] 位置是1，就返回1，上面不是1，就返回0
     *
     * @since 2022-04-21 21:57:24
     */
    public static int f(int[][] b, int i, int j) {

        // (b[i][j] & 1) == 1)  需要和 1 做 与 运算。也及时只拿最后一位。【其他的位可能借出去了】
        return (i >= 0 && i < b.length && j >= 0 && j < b[0].length && (b[i][j] & 1) == 1) ? 1 : 0;
    }

}
